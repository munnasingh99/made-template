// 1. This Jayvee model describes a pipeline 
// from a CSV file in the web 
// to a SQLite file with constraints on the data as mentioned in exercise slide.

pipeline GoodsPipeline {
    // See here for meta-data of the data source
    // https://mobilithek.info/offers/-94981960701408443

    // 2. We define the pipeline structure by referencing the blocks used.
    GoodsHttpExtractor
        -> GoodsTextFileInterpreter
        -> GoodsCSVInterpreter
        -> GoodsRowsDeleter;

    GoodsRowsDeleter
        -> GoodsColumnDeleter
        -> GoodsTableInterpreter
        -> GoodsSQLiteLoader;

    // 3. After the pipeline structure, we define the blocks used.
    block GoodsHttpExtractor oftype HttpExtractor {
        url: "https://www-genesis.destatis.de/genesis/downloads/00/tables/46131-0014_00.csv";
    }


    // 4. Encoding to handle German Umlauts.
    block GoodsTextFileInterpreter oftype TextFileInterpreter {
        encoding: "latin2";
    }

    // 5. Delimiter (;) to be used in the CSV file.
    block GoodsCSVInterpreter oftype CSVInterpreter { 
        delimiter: ";";
    
    }

    // 6. Deletion of rows form 1 to 8 from the table as they are not required
    block GoodsRowsDeleter oftype RowDeleter {
        delete: [row 1,row 2,row 3,row 4,row 5,row 6,row 7,row 8];
    }

    // 7. Deletion of column from E to AR
    block GoodsColumnDeleter oftype ColumnDeleter {
        delete: [column F,column G,column H,column I,column J,column K,
        column L,column M,column N,column O,column P,column Q,
        column R,column S,column T,column U,column V,column W,
        column X,column Y,column Z,column AA,column AB,column AC,
        column AD,column AE,column AF,column AG,column AH,column AI,
        column AJ,column AK,column AL,column AM,column AN,column AO,
        column AP,column AQ,column AR,column AS];
    }

    
    // 8. We define the schema of the SQLite table to be created.
    block GoodsTableInterpreter oftype TableInterpreter {
        header: false;
        columns: [

            // 4.Here we are using the column names from the CSV file
            // to define the schema of the SQLite table.
            // The types of the columns are inferred from the data.

            "year" oftype PositiveInteger,
            "month" oftype ValidMonths,
            "goods_id" oftype OnlyValidIds,
            "goods_name" oftype text,
            "goods_source" oftype text,
            "abroad" oftype PositiveInteger,
            "total" oftype PositiveInteger,
        ];
    }

    // 9. SQLite file to be created with the schema defined above.
    block GoodsSQLiteLoader oftype SQLiteLoader {
        table: "goods";
        file: "./goodsTransportedByTrain.sqlite";
    }

}
    // 10. We define constraints on the different columns to ensure it is valid according to the schema.
    valuetype ValidMonths oftype text {
        constraints: [
            OnlyValidMonthList,
        ];
    }

    valuetype OnlyValidIds oftype text {
        constraints: [
            OnlyValidIdsList,
        ];
    }

    valuetype PositiveInteger oftype integer {
        constraints: [
            OnlyValidNumbers,
        ];
    }

    // 11. This constraint ensures that the Month column to only contains German Months names.
    constraint OnlyValidMonthList on text:
        value in ["Januar", "Februar", "MÃ¤rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"];


    // 12. This constraint ensures that the all the integers entries are positive.
    constraint OnlyValidNumbers on integer:
        value >= 0;

    // 13. This constraint ensures that the goods_id column to only contain values in the format NST7-XXX.
    constraint OnlyValidIdsList on text:
       value matches /^NST7-[A-Z0-9]{3}$/;




