// 1. This Jayvee model describes a pipeline 
// from a CSV file in the web 
// to a SQLite file with constraints on the data as mentioned in exercise slide.

pipeline TemperaturePipeline {
    // See here for meta-data of the data source
    // https://mobilithek.info/offers/-94981960701408443

    // 2. We define the pipeline structure by referencing the blocks used.
    TemperatureExtractor
        -> TemperatureFilePicker
        -> TemperatureTextFileInterpreter
        -> TemperatureCSVInterpreter;

    TemperatureCSVInterpreter
        -> TemperatureCellWriter
        -> TemperatureCellWriter2
        -> TemperatureTableInterpreter
        -> CelsiusToFahrenheitTransformer
        -> CelsiusToFahrenheitTransformer2
        -> TemperatureSQLiteLoader;

    // 3. After the pipeline structure, we define the blocks used.
    block TemperatureExtractor oftype GTFSExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }


    // 4. Encoding to handle German Umlauts.
    block TemperatureTextFileInterpreter oftype TextFileInterpreter {
        encoding: "utf8";
    }

    // 5. Delimiter (;) to be used in the CSV file.
    block TemperatureCSVInterpreter oftype CSVInterpreter { 
        delimiter: ";";
    
    }
    
    block TemperatureFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    block TemperatureCellWriter oftype CellWriter {
        at: range A1:E1;
        write: ['id','producer','model','month','temperature'];
    }

    block TemperatureCellWriter2 oftype CellWriter {
        at: cell J1;
        write: ['battery_temperature'];
    }

     transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 9/5) + 32;
    }
    
    block CelsiusToFahrenheitTransformer oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        use: CelsiusToFahrenheit;
    }

    block CelsiusToFahrenheitTransformer2 oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        use: CelsiusToFahrenheit;
    }

    // 8. We define the schema of the SQLite table to be created.
    block TemperatureTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [

            // 4.Here we are using the column names from the CSV file
            // to define the schema of the SQLite table.
            // The types of the columns are inferred from the data.

            "id" oftype PositiveInteger,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype integer,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal,
        ];
    }

    // 9. SQLite file to be created with the schema defined above.
    block TemperatureSQLiteLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperaturesqlite";
    }

}

    valuetype PositiveInteger oftype integer {
        constraints: [
            OnlyValidNumbers,
        ];
    }

    

    // 12. This constraint ensures that the all the integers entries are positive.
    constraint OnlyValidNumbers on integer:
        value >= 0;

    



